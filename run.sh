#!/bin/bash
# =====================================================
# üöÄ Universal GPU Miner Launcher for Ubuntu 24 / HiveOS
# =====================================================
# ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç ‚â•32 CPU —è–¥–µ—Ä –∏ ‚â•45 –ì–ë RAM –Ω–∞ GPU (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)  # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ/–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
# ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –∫–∞—Ç–∞–ª–æ–≥ $HOME/work
# ‚Ä¢ –°–∫–∞—á–∏–≤–∞–µ—Ç –º–∞–π–Ω–µ—Ä –∏ —Å—Ç–∞–≤–∏—Ç –ø—Ä–∞–≤–∞
# ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π GPU (–ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ CPU –∏ RAM)
# ‚Ä¢ GPU 0 ‚Äî —Å live tail –ª–æ–≥–æ–º
# ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Ñ–æ–Ω–æ–≤–æ —Å –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
# ‚Ä¢ –õ–æ–≥-—Ä–æ—Ç–∞—Ü–∏—è: –ø—Ä–∏ >50 –ú–ë –ª–æ–≥ –æ—á–∏—â–∞–µ—Ç—Å—è
# =====================================================

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ===
if [ -z "$1" ]; then
  echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <WORKER_NAME>"
  exit 1
fi
WORKER_NAME="$1"

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
POOL_URL="stratum+tcp://neptune.drpool.io:30127"
BASE_DIR="$HOME/work"
MINER_TAR="ubuntu_20-dr_neptune_prover-3.2.0.tar.gz"
MINER_URL="https://pub-e1b06c9c8c3f481d81fa9619f12d0674.r2.dev/image/v2/$MINER_TAR"
WORK_DIR="$BASE_DIR/worker"

MIN_CPU_PER_GPU=28   # –º–∏–Ω–∏–º—É–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä –Ω–∞ 1 GPU
MIN_RAM_PER_GPU=42   # –º–∏–Ω–∏–º—É–º –ì–ë RAM –Ω–∞ 1 GPU

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
TOTAL_RAM_GB=$(free -g | awk '/Mem:/ {print $2}')
# –ª–æ–≥–∏—á–µ—Å–∫–∏–µ CPU (–¥–ª—è taskset/—Ä–∞–∑–±–∏–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤):
CPU_CORES=$(nproc)
# —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ë–º–∫–æ—Å—Ç–∏):
PHYS_CORES=$(lscpu -p=Core,Socket | grep -v '^#' | sort -u | wc -l)
GPU_COUNT=$(nvidia-smi -L | wc -l)

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–∫–∏ ===
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ $BASE_DIR..."
rm -rf "$BASE_DIR"
mkdir -p "$BASE_DIR"
cd "$BASE_DIR" || exit 1

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–π–Ω–µ—Ä–∞ ===
echo "‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞..."
wget -q "$MINER_URL" -O "$MINER_TAR"
tar -xzf "$MINER_TAR"
rm -f "$MINER_TAR"
mv dr_neptune_prover worker
chmod +x "$WORK_DIR"/*
cd "$WORK_DIR" || exit 1

# === –§—É–Ω–∫—Ü–∏—è –ª–æ–≥-—Ä–æ—Ç–∞—Ü–∏–∏ ===
rotate_log() {
  local LOG_FILE="$1"
  local MAX_SIZE_MB=50
  if [ -f "$LOG_FILE" ]; then
    local SIZE_MB
    SIZE_MB=$(du -m "$LOG_FILE" | awk '{print $1}')
    if [ "$SIZE_MB" -gt "$MAX_SIZE_MB" ]; then
      echo "üßæ –õ–æ–≥ $LOG_FILE –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_SIZE_MB} –ú–ë ‚Äî –æ—á–∏—â–∞–µ—Ç—Å—è..."
      : >"$LOG_FILE"
    fi
  fi
}

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞ —Å –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º ===
run_miner() {
  local GPU_ID=$1
  local START_CORE=$2
  local END_CORE=$3
  local LOG_FILE="guesser_${GPU_ID}.log"

  while true; do
    rotate_log "$LOG_FILE"
    if [ -n "$START_CORE" ] && [ -n "$END_CORE" ]; then
      echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ GPU ${GPU_ID} (–ª–æ–≥–∏—á. CPU ${START_CORE}-${END_CORE})..."
      taskset -c ${START_CORE}-${END_CORE} ./dr_neptune_prover -p "$POOL_URL" -w "mustfun.${WORKER_NAME}" -g "$GPU_ID" >>"$LOG_FILE" 2>&1
    else
      echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ GPU ${GPU_ID} (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ CPU)..."
      ./dr_neptune_prover -p "$POOL_URL" -w "mustfun.${WORKER_NAME}" -g "$GPU_ID" >>"$LOG_FILE" 2>&1
    fi
    echo "‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å GPU ${GPU_ID} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
    sleep 5
  done
}

# === –Å–º–∫–æ—Å—Ç—å –ø–æ CPU –∏ RAM (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞!) ===
AVAILABLE_CPU_GPUS=$((PHYS_CORES / MIN_CPU_PER_GPU))
AVAILABLE_RAM_GPUS=$((TOTAL_RAM_GB / MIN_RAM_PER_GPU))

# –ú–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö
if [ "$AVAILABLE_CPU_GPUS" -lt "$AVAILABLE_RAM_GPUS" ]; then
  AVAILABLE_GPUS=$AVAILABLE_CPU_GPUS
else
  AVAILABLE_GPUS=$AVAILABLE_RAM_GPUS
fi

# –ù–æ—Ä–º–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–ª—å–Ω—ã—Ö GPU –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ 1
if [ "$AVAILABLE_GPUS" -lt 1 ]; then
  AVAILABLE_GPUS=1
fi
if [ "$AVAILABLE_GPUS" -gt "$GPU_COUNT" ]; then
  AVAILABLE_GPUS=$GPU_COUNT
fi

echo "‚öôÔ∏è  –§–∏–∑. —è–¥—Ä–∞: $PHYS_CORES (–º–∏–Ω. $MIN_CPU_PER_GPU/–ø—Ä–æ—Ü–µ—Å—Å), RAM: ${TOTAL_RAM_GB}–ì–ë (–º–∏–Ω. $MIN_RAM_PER_GPU/–ø—Ä–æ—Ü–µ—Å—Å)"
echo "‚û°Ô∏è  –ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–∞–π–Ω–µ—Ä–∞: $AVAILABLE_GPUS –∏–∑ $GPU_COUNT GPU"

# === –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö CPU –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ GPU ===
if [ "$AVAILABLE_GPUS" -gt 1 ]; then
  CORES_PER_GPU=$((CPU_CORES / AVAILABLE_GPUS))
else
  CORES_PER_GPU=$CPU_CORES
fi

CURRENT_START=0

# === –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ GPU (–ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º) ===
echo ""
echo "==============================================="
printf "%-6s | %-15s | %-10s | %-10s\n" "GPU" "CPU –¥–∏–∞–ø–∞–∑–æ–Ω" "RAM –û–ö" "–°—Ç–∞—Ç—É—Å"
echo "-----------------------------------------------"
TMP_START=$CURRENT_START
for ((i = 0; i < GPU_COUNT; i++)); do
  if [ "$i" -lt "$AVAILABLE_GPUS" ]; then
    END=$((TMP_START + CORES_PER_GPU - 1))
    if [ "$END" -ge "$CPU_CORES" ]; then END=$((CPU_CORES - 1)); fi
    printf "%-6s | %-15s | %-10s | %-10s\n" "GPU${i}" "${TMP_START}-${END}" "‚úÖ" "–ó–∞–ø—É—Å–∫"
    TMP_START=$((END + 1))
  else
    printf "%-6s | %-15s | %-10s | %-10s\n" "GPU${i}" "-" "‚ùå" "–ü—Ä–æ–ø—É—Å–∫"
  fi
done
echo "==============================================="
echo ""

# === –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–æ–≤ ===
echo "üöÄ –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞..."
for ((i = 0; i < GPU_COUNT; i++)); do
  if [ "$i" -lt "$AVAILABLE_GPUS" ]; then
    END_CORE=$((CURRENT_START + CORES_PER_GPU - 1))
    if [ "$END_CORE" -ge "$CPU_CORES" ]; then
      END_CORE=$((CPU_CORES - 1))
    fi

    if [ "$i" -eq 0 ]; then
      run_miner "$i" "$CURRENT_START" "$END_CORE" &
      sleep 2
      tail -n 100 -f "guesser_${i}.log"
    else
      run_miner "$i" "$CURRENT_START" "$END_CORE" &
      sleep 1
    fi
    CURRENT_START=$((END_CORE + 1))
  else
    echo "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ GPU${i} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∏–∑. —è–¥–µ—Ä ‚â•${MIN_CPU_PER_GPU} –∏/–∏–ª–∏ RAM ‚â•${MIN_RAM_PER_GPU}–ì–ë)"
  fi
done